from aiogram import F, Router, types
from aiogram.filters import Command, StateFilter, or_f
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from sqlalchemy.ext.asyncio.session import AsyncSession

from filters.chat_types import ChatTypeFilter, IsAdmin
from kbds.reply import get_keyboard
from database.orm_query import orm_add_product, orm_delete_product, orm_get_product, orm_get_products, orm_update_product
from kbds.inline import get_callback_btns, get_inlineMix_btns, get_url_btns



admin_router = Router()
admin_router.message.filter(ChatTypeFilter(["private"]), IsAdmin())

ADMIN_KB = get_keyboard(
    "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä",
    "–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç",
    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
    sizes=(2,),
)

class AddProduct(StatesGroup):
    name = State()
    description = State()
    price = State()
    image = State()

    product_for_change = None

    texts = {
        'AddProduct:name': '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ:',
        'AddProduct:description': '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ:',
        'AddProduct:price': '–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–Ω–æ–≤–æ:',
        'AddProduct:image': '–≠—Ç–æ—Ç —Å—Ç–µ–π—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π, –ø–æ—ç—Ç–æ–º—É...',
    }

@admin_router.message(Command("admin"))
async def add_product(message: types.Message):
    await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=ADMIN_KB)


@admin_router.message(F.text == "–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç")
async def starring_at_product(message: types.Message, session: AsyncSession):
    for product in await orm_get_products(session):
        print(product)
        await message.answer_photo(
            photo=product.image,
            caption=f"""<strong>{product.name}</strong>
                    \n{product.description}\n–¶–µ–Ω–∞: {round(product.price, 2)}
                    """,
            reply_markup=get_callback_btns(
                btns={
                    "–£–¥–∞–ª–∏—Ç—å": f"delete_{product.id}",
                    "–ò–∑–º–µ–Ω–∏—Ç—å": f"change_{product.id}",
                })
            )
    await message.answer("–û–ö, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ üîù")

@admin_router.callback_query(F.data.startswith('delete_'))
async def delete_product(callback: types.CallbackQuery, session: AsyncSession):
    product_id = callback.data.split("_")[-1] # –ø–æ–ª—É—á–∞–µ–º product.id
    await orm_delete_product(session, int(product_id))

    await callback.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω")
    await callback.message.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω!")


@admin_router.callback_query(StateFilter(None), F.data.startswith('change_'))
async def change_product(callback: types.CallbackQuery, state: FSMContext, session: AsyncSession):
    product_id = callback.data.split("_")[-1] # –ø–æ–ª—É—á–∞–µ–º product.id
    # —Ç–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è 
    product_for_change = await orm_get_product(session, int(product_id))
    
    AddProduct.product_for_change = product_for_change # —Å–æ–∑—Ä–∞–Ω—è–µ–º –≤ –∫–ª–∞—Å—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
    await callback.answer()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
                                  reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(AddProduct.name)


    


#–ö–æ–¥ –Ω–∏–∂–µ –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π (FSM)


@admin_router.message(StateFilter(None), F.text == "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def add_product(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(AddProduct.name)

@admin_router.message(StateFilter('*'), Command("–æ—Ç–º–µ–Ω–∞"))
@admin_router.message(StateFilter('*'), F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_handler(message: types.Message, state: FSMContext) -> None:

    current_state = await state.get_state()
    if current_state is None:
        return
    if AddProduct.product_for_change:
        AddProduct.product_for_change = None
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=ADMIN_KB)


@admin_router.message(Command("–Ω–∞–∑–∞–¥"))
@admin_router.message(F.text.casefold() == "–Ω–∞–∑–∞–¥")
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state == AddProduct.name:
        await message.answer('–ü—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ—Ç, –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∞')
        return
    
    previous = None
    for step in AddProduct.__all_states__:
        if step.state == current_state:
            await state.set_state(previous)
            await message.answer(f'–≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –ø—Ä–æ—à–ª–æ–º—É —à–∞–≥—É \n {AddProduct.texts[previous.state]}')
            return
        previous = step

@admin_router.message(AddProduct.name, or_f(F.text, F.text == '.'))
async def add_name(message: types.Message, state: FSMContext):
    if message.text == '.':
        await state.update_data(name=AddProduct.product_for_change.name)
    else:
        if len(message.text) >= 100:
            await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 100 —Å–∏–º–≤–æ–ª–æ–≤\n –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
            return
        await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    await state.set_state(AddProduct.description)

@admin_router.message(AddProduct.name)
async def add_name(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")


@admin_router.message(AddProduct.description, or_f(F.text, F.text == '.'))
async def add_description(message: types.Message, state: FSMContext):
    if message.text == '.':
        await state.update_data(description=AddProduct.product_for_change.description)
    else:
        await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞")
    await state.set_state(AddProduct.price)
@admin_router.message(AddProduct.description)
async def add_name(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")

@admin_router.message(AddProduct.price, or_f(F.text, F.text == '.'))
async def add_price(message: types.Message, state: FSMContext):
    if message.text == '.':
            await state.update_data(price=AddProduct.product_for_change.price)
    else:
        try:
            float(message.text)
        except ValueError:
            await message.answer("–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ —Ü–µ–Ω—É –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞")
            return
        
        await state.update_data(price=message.text)
    await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    await state.set_state(AddProduct.image)
@admin_router.message(AddProduct.price)
async def add_name(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ —Ü–µ–Ω—É –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞")

@admin_router.message(AddProduct.image, or_f(F.photo, F.text == '.'))
async def add_image(message: types.Message, state: FSMContext, session: AsyncSession):
    if message.text == '.':
        await state.update_data(image=AddProduct.product_for_change.image)
    else:
        await state.update_data(image=message.photo[-1].file_id)
    data = await state.get_data()
    try:
        if AddProduct.product_for_change:
            await orm_update_product(session=session, product_id=AddProduct.product_for_change.id, data=data)
        else:
            await orm_add_product(session=session, data=data)
        await message.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω/–∏–∑–º–µ–Ω–µ–Ω", reply_markup=ADMIN_KB)
        await state.clear()
    except Exception as e:
        await message.answer(
            f"–û—à–∏–±–∫–∞ \n{str(e)}\n –∑–æ–≤–∏—Ç–µ –ø—Ä–æ–≥–µ—Ä–∞",
            reply_markup=ADMIN_KB
        )
        await state.clear()
    
    AddProduct.product_for_change = None
# –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã —Å –ë–î
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /admin
# –í—ã–±–∏—Ä–∞–µ—Ç "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"
# –ë–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
# –ü–æ—à–∞–≥–æ–≤–æ —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ
# –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥):
# –°–æ–∑–¥–∞–µ—Ç—Å—è —Å–µ—Å—Å–∏—è —á–µ—Ä–µ–∑ middleware
# –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ ORM
# –°–µ—Å—Å–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è
@admin_router.message(AddProduct.image)
async def add_name(message: types.Message, state: FSMContext):
    await message.answer("–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")